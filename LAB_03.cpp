// LAB_3.cpp

// Лабораторная работа №3

/*
Значения b вычислить в программе до цикла, а значение a ввести перед циклом.

	cos x = 1 - x^2 / 2! + x^4 / 4! - ... = E ^(inf) n = 0; ((-1)^n / (2 * n)!) * x^2n, x прин. C
	х = 0.0 – 1.0 шаг 0.1 (cos)
*/

// Подключение директивы препроцессора для математических решений
#define _USE_MATH_DEFINES

// Подключение библиотеки математических функций
#include <stdio.h>
#include <math.h>
#include <process.h>
#include <stdlib.h> 
#include <iostream>
// Подключение библиотеки для выполнения функции выделения памяти
#include <malloc.h>

float factf(float);

// Основная программа
void lab_03() {
	// Подключение русификации программы
	system("chcp 1251 > nul");

	// Устанавливаем типы переменных
	int sw; // -> дл переключателей



	// Устанавливаем точку возврата меню с потерей результата
MENU:;

	// Очистика предыдующих результатов
	system("CLS");

	// Вывод меню

	printf("Контрольные задания: \n\n");
	printf("  1. Описание массивов, п.5.2\n");
	printf("  2. Ввод и вывод массива. Вычисление суммы элементов, п.5.3\n");
	printf("  3. Печать массива столбиком, п.5.4\n");
	printf("  4. Определение минимума в массиве и его номера, п.5.5\n");
	printf("  5. Инициализация массива в программе и определение отдельных сумм положительных и отрицательных элементов, п.5.6\n");
	printf("  6. Использование указателя для массива, п.5.7\n");
	printf("  7. Вычисление и запоминание значений массива из значений вычисленного ряда, п.5.8\n");
	printf("  8. Заполнение и сумма в динамическом массиве через указатель, п.5.9\n");
	printf("  9. Двумерные массивы, п.5.10\n\n");

	printf("Программа с дополнительными требованиями:\n\n");
	printf("  10. Ввод и вывод двумерного массива. Вычисление суммы его элементов п.8.1\n");
	printf("  11. Определение максимума в двумерном массиве и координат максимума п.8.2\n");
	printf("  12. Инициализация двумерного массива п.8.3\n");
	printf("  13. Вычисления значений полинома п.8.4\n");
	printf("  14. Описание и инициализация двумерных массивов и умножение матриц\n");
	printf("  15. Доказательство расположения массива\n");


	printf("\n0. Выход ...\n");

	printf("Выберете пункт меню: ");

	//sw = getchar();
	scanf_s("%d", &sw);

	printf("\n");

	//Начало

	// Переключатель
	switch (sw)
	{

	case 1:
	{
		//Описать целочисленные (MasInt), вещественные (MasFloat) и символьные (MasChar) 
		//одномерные массивы и инициализировать их в программе. 
		//Посмотреть содержимое массивов в отладчике 
		//и вывести на печать  5-е элементы этих массивов (k =5). 
		//Размер массивов не менее 10 элементов.
		//Описать и инициализировать двумерный целочисленный массив Matrica (5*4), 
		//распечатать элемент этого массива с номерами (индексы)  i=3, j = 2.

		system("CLS");
		printf("Описание массивов, п.5.2\n\n");

		int i = 3, j = 2;
		int MasInt[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
		float MasFloat[10] = { 1.00, 2.05, 3.14, 4.04, 5.55, 6.00, 7.77, 8.08, 9.99, 0.07 };
		char MasChar[10] = { "Hi world!" };

		printf("MasInt[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0}\n");
		printf("MasFloat[10] = { 1.00, 2.05, 3.14, 4.04, 5.55, 6.00, 7.77, 8.08, 9.99, 0.07 }\n");
		printf("MasChar[10] = { Hi world! }\n\n");

		printf("Пятый элемент массив целочисленного типа: %d\n", MasInt[5]);
		printf("Пятый элемент массив вещественного типа: %f\n", MasFloat[5]);
		printf("Пятый элемент массив символьного типа: %c\n", MasChar[5]);

		int Mathric[5][4] =
		{
			{1, 2, 3, 4},
			{5, 6, 7, 8},
			{9, 10, 11, 12},
			{13, 14, 15, 16},
			{17, 18, 19, 20}
		};

		printf("Mathric = \n{\n	{ 1, 2, 3, 4 },\n	{ 5, 6, 7, 8 },\n	{ 9, 10, 11, 12 },\n	{ 13, 14, 15, 16 }\n	{ 17, 18, 19, 20 }\n};\n\n");
		printf("Mathric[3][2] = %d", Mathric[3][2]);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 2:
	{
		/*Для целочисленного массива MasInt (тип int), размерностью 5 элементов,
		выполнить следующие действия:
		•	Выполнить в отдельном цикле ввод элементов массива с клавиатуры.
		•	Вычислить сумму элементов этого массива в отдельном цикле
		•	Распечатать сумму этого массива (в отдельно строке).
		*/
		system("CLS");
		printf("Ввод и вывод массива. Вычисление суммы элементов, п.5.3\n\n");

		int MasInt[5], sum = 0;

		printf("Введите любое значение для массива\n");
		for (int i = 0; i < 5; i++)
		{
			printf("MasInt [ %d ] : ", i);
			scanf_s("%d", &MasInt[i]);
			sum += MasInt[i];
		}

		printf("Сумма элементов массива: %d", sum);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 3:
	{
		/*Распечатать введенный в предыдущем пункте контрольного задания массив столбиком.*/
		system("CLS");
		printf("Печать массива столбиком, п.5.4\n\n");

		int MasInt[5];

		printf("Введите любое значение для массива\n");
		for (int i = 0; i < 5; i++)
		{
			printf("MasInt [ %d ] : ", i);
			scanf_s("%d", &MasInt[i]);
		}
		printf("\n");

		for (int i = 0; i < 5; i++)
			printf("Элемент массива MasInt [ %d ] : %d\n", i, MasInt[i]);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 4:
	{
		/*Во введенном массиве, в отдельном цикле, выполняется поиск
		максимального элемента и запоминание его номера.
		Результаты поиска вывести на экран.
		Программу отладить и проверить на разных примерах.
		Составить блок-схему программы.
		*/
		system("CLS");
		printf("Определение минимума в массиве и его номера, п.5.5\n\n");


		int MasInt[5], i_min = 0;

		printf("Введите любое значение для массива\n");
		for (int i = 0; i < 5; i++)
		{
			printf("MasInt [ %d ] : ", i);
			scanf_s("%d", &MasInt[i]);
		}
		printf("\n");

		for (int i = 0; i < 5; i++)
			if (MasInt[i] < MasInt[i_min])
				i_min = i;

		printf("Минимальное значение: MasInt [ %d ] : %d", i_min, MasInt[i_min]);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 5:
	{
		/*Описать массив действительных(double) чисел MasD (6 элементов) и
		выполнить его инициализацию при описании.
		Константы инициализации массива должны быть разных знаков.
		Построить один цикл для вычисления отдельных сумм положительных
		и отрицательных элементов.
		Результаты вычислений сумм вывести на экран.*/
		system("CLS");
		printf("Инициализация массива в программе и определение отдельных сумм положительных и отрицательных элементов, п.5.6\n\n");

		double MasD[6] = { 3.0 , -5.1, 1.0 , -7.2 }, sum_positive = 0, sum_negative = 0;
		printf("MasD[6] = { 3.0 , -5.1, 1.0 , -7.2 }\n\n");

		for (int i = 0; i < 6; i++)
			if (MasD[i] > 0)
				sum_positive += MasD[i];
			else
				sum_negative += MasD[i];

		printf("Сумма положительных: %2.3f\n", sum_positive);
		printf("Сумма отрицательных: %2.3f\n", sum_negative);


		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 6:
	{
		/*Описать указатель на тип целый. Присвоить его адрес номеру минимального
		элемента из предыдущего задания данного раздела.
		Вывести на печать (printf) значение этого элемента с помощью указателя.*/
		system("CLS");
		printf("Использование указателя для массива, п.5.7\n\n");

		int MasInt[5], i_min = 0;

		printf("Введите любое значение для массива\n");
		for (int i = 0; i < 5; i++)
		{
			printf("MasInt [ %d ] : ", i);
			scanf_s("%d", &MasInt[i]);
		}
		printf("\n");

		for (int i = 0; i < 5; i++)
			if (MasInt[i] < MasInt[i_min])
				i_min = i;


		printf("Минимальное значение: MasInt [ %d ] : %d\n", i_min, MasInt[i_min]);

		int* pMin = &MasInt[i_min];
		printf("Печать c указателем = %d \n", *pMin);
		printf("Адрес = %p \n", pMin);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 7:
	{
		/*По варианту соответствующему номеру в журнале группы, построить программу вычисления
		значения функции (см. таблицу). Результаты вычисления заносятся в массивы:
		для аргументов и для функций (MasF, MasX).
		Вычислить массив MasF (float) по формуле специального ряда для заданной
		библиотечной функции для каждого значения аргумента х (по вариантам – см. ниже п.6).
		Результат вычисления для каждого значения аргумента запомнить в массиве – MasF
		(и показать преподавателю результат  в отладчике). Значения и шаг изменения
		аргумента х заданы в таблице вариантов (см. ниже.).
		Распечатать результат в форме таблицы (номер - значение функции - значение
		функции из библиотеки, - значение аргумента). Таблицу оформить рамкой из
		звездочек (“*”). Цикл итера-ционных вычислений значений рассмотрен выше (см. п.п.  4.4).
		Для реализации данной задачи необходим двойной цикл. Проверить
		полученные вычисления с помощью вычисления библио-течной функции (у нас в примере exp). */
		system("CLS");
		printf("Вычисление и запоминание значений массива из значений вычисленного ряда, п.5.8\n\n");

		// Для аргументов 
		float MasF[10];
		// Для функции 
		float MasX[10];
		// Для проверки точности вычисления
		float an = 0.0;
		// Для суммирования членов ряда по знакоочередями
		float sgn = 1.0;
		float x = 0.0;
		// Начальное значение
		an = x;

		for (int k = 0; k < 10; k++)
		{	// Итерационный цикл - бесконечно повторяющий цикл
			x = x + 0.1;
			an = x;
			// Начальное значение для переменной сумирования
			float sum = 1;
			float сount = 1.0;
			// Точность, с которой будет расчитана сумма ряда.
			float eps = 0.1;
			// Знакочередование
			float sgn = -1.0;
			// проверка точности вычисления
			while (an > eps)
			{
				// factf - функция факториала
				an = powf(x, (2 * сount)) / factf(2 * сount);
				// суммирование членов ряда + знакочередование
				sum += (sgn * an);
				// n - порядковый номер члена ряда
				сount += 1.0;
				// Знакочередование
				sgn = -sgn; // sgn = (-1)*sgn
			}
			printf(" Ряд-cos = %f Функция из библиотеки = %f  Аргумент x = %0.2f n=%5.2f \n", sum, cos(x), x, сount);
			MasF[k] = sum;
			MasX[k] = x;

		};

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 8:
	{
		/*Создать динамический массив целого типа размером 10 элементов.
		Заполнить его случайными числами в диапазоне 0-100
		(использовать функцию rand(случайное число) из библиотеки <stdlib.h>).
		Вычислить сумму элементов этого массива и распечатать результат
		подсчета и полученный массив. */
		system("CLS");
		printf("Заполнение и сумма в динамическом массиве через указатель, п.5.9\n\n");

		// Создание динамического массива с размером 10
		int* DinamicalArray = (int*)calloc(10, sizeof(int));
		int sum = 0;
		// Указатель массива
		int* pArr = DinamicalArray;

		// Генерация случайных чисел в диапзоне 0 - 100
		for (int i = 0; i < 10; i++)
		{
			pArr[i] = (rand() % 100);
			printf("Arr [ %d ] : %d\n", i, pArr[i]);
			sum += pArr[i];
		}

		printf("\nСумма элементов: %d\n", sum);

		free(pArr);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 9:
	{
		/*Описать и проинициализировать в программе двумерный
		целочисленный массив размеров 3*5 элементов.*/
		system("CLS");
		printf("Двумерные массивы, п.5.10\n\n");

		int Mathric[3][5] =
		{
			{1, 2, 3, 4, 5},
			{6, 7, 8, 9, 10},
			{11, 12, 13, 14, 15}
		};

		printf("int Mathric[3][5] = \n{\n  {1, 2, 3, 4, 5},\n  {6, 7, 8, 9, 10},\n  {11, 12, 13, 14, 15}\n}\n\n");

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	// Дополнительные требования

	case 10:
	{
		/*Выполняется ввод двумерного действительного массива (3*4) построчно (double).
		Первоначально вводятся значения чисел массива с подсказкой номера строки и столбца.
		Далее  вычисляется сумма всех элементов и распечатывается
		таблично массив и результат расчета.
		Сумма выводится в отдельной строке.*/
		system("CLS");
		printf("Ввод и вывод двумерного массива. Вычисление суммы его элементов п.8.1\n\n");

		int sum = 0;
		float Mathric[3][4];

		printf("Введите любые значения для матрицы\n");
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				printf("Matrhic [ %d ] [ %d ] = ", i, j);
				scanf_s("%f", &Mathric[i][j]);
			}
			printf("\n");
		}

		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 4; j++)
				sum += Mathric[i][j];

		printf("Сумма элементов матрицы: %d\n", sum);


		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 11:
	{
		/*Выполняется ввод двумерного массива.
		Наполнение массива задается с помощью инициализации в программе.
		Выполняется поиск максимального/минимального элементов в массиве.
		Массив печатается в виде таблицы.
		Значение максимума/минимума и его координат выводятся в отдельных строках.*/
		system("CLS");
		printf("Определение максимума в двумерном массиве и координат максимума п.8.2\n\n");

		int Mathric[5][4] =
		{
			{1, 2, 3, 4},
			{5, 0, 7, 8},
			{9, 10, 20, 12},
			{13, 14, 15, 16},
			{17, 18, 19, 20}
		};

		printf("Mathric = \n{\n	{ 1, 2, 3, 4 },\n	{ 5, 0, 7, 8 },\n	{ 9, 10, 20, 12 },\n	{ 13, 14, 15, 16 }\n	{ 17, 18, 19, 20 }\n};\n\n");

		int i_max = 0, i_min = 0, j_max = 0, j_min = 0;

		for (int i = 1; i < 5; i++)
			for (int j = 1; j < 4; j++)
			{
				// Вычисление миниимального значения
				if (Mathric[i][j] < Mathric[i_min][j_min])
				{
					i_min = i;
					j_min = j;
				}
				// Вычисление максимального значения
				if (Mathric[i][j] > Mathric[i_max][j_max])
				{
					i_max = i;
					j_max = j;
				}
			}
		printf("\n");
		printf("Максимальное значение Mathric[ %d ][ %d ] = %d\n", i_max, j_max, Mathric[i_max][j_max]);
		printf("Минимальное значение Mathric[ %d ][ %d ] = %d\n", i_min, j_min, Mathric[i_min][j_min]);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 12:
	{
		/*Продемонстрировать возможности для инициализации
		двумерного массива действительного типа.
		Массив вывести на экран в виде таблицы.*/
		system("CLS");
		printf("Инициализация двумерного массива п.8.3\n\n");

		double Mathric[5][4] =
		{
			{1.124, 2.435, 3.52343, 4.52123},
			{5.43534, 90.1231, 7.89767, 8.3254},
			{9.5346, 10.534, 10.3424, 12.435345},
			{546546.2, 14.123, 15.765, 16.224},
			{423, 2464.123, 4345.765, 72.224}
		};

		for (int i = 1; i < 5; i++)
		{
			for (int j = 1; j < 4; j++)
				printf("Mathric [ %d ] : %f\n", i, Mathric[i][j]);
			printf("\n");
		}


		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 13:
	{
		/*Сделать программу для вычисления полинома общего вида:
		y = a_1*x^n + a_2*x^(n - 1) + ... + a_n*x + a_(n + 1)
		Значения коэффициентов задаются в отдельном массиве AMas.
		Для вычисления суммы ряда использовать схему Горнера.
		Степнь полинома равня 10-ти. Сделать алгоритм вычисления максимально эффективным.
		Значения х задать в диапазоне от 0 до 10 с шагом 0.1.
		Результат вычислений вывести в табличной форме.
		*/
		system("CLS");
		printf("Вычисления значений полинома п.8.4\n\n");

		int i, a, n = 10;
		double x = 0, step = 0.1;

		// Установка массива с размером n (n = 10 (степень полинома 10));
		double* y = (double*)calloc(n, sizeof(double));
		// Значения коэффициентов
		int* AMas = (int*)calloc(n, sizeof(int));

		printf("Введите любые значения для полинома\n");
		for (int i = 0; i < n; i++)
		{
			printf("AMas [ %d ] : ", i + 1);
			scanf_s("%d", &AMas[i]);
		}

		// y = a_1*x^n + a_2*x^(n - 1) + ... + a_n*x + a_(n + 1)
		for (int i = 0; i < n; i++)
		{
			y[i] = y[i] + AMas[i] * powf(x, i);
			printf("y [ %d ] = %3.3f при х = %1.3f \n", i + 1, y[i], x);

			// Пошагово прибавляет по 0.1
			x += step;
		}


		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 14:
	{
		/*Описать три массива: A (1*3),  B(1*4) и С (3*4).
		Массивы A и B инициализировать в программе.
		Вычислить массив С – матрицe, как произведение массивов матриц  А и В.
		С = A*B. (Это задание для студентов, изучивших курс матричной алгебры).
		Для поиска формулы расчета использовать справочники или Интернет.
		*/
		system("CLS");
		printf("Описание и инициализация двумерных массивов и умножение матриц\n\n");

		// Матрица	i  j
		int Mathric[3][3] =
		{
			{1, 1, 1},
			{2, 2, 1},
			{1, 2, 1}
		};

		// Обратная матрица i  j
		int Inverse_Mathric[3][3] =
		{
			{0, 1, -1},
			{-1, 0, 1},
			{2, -1, 0}
		};

		// Длина строка и столбцов равен 3
		const int row = 3, col = 3;

		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
				printf("Mathric [ %d ] [ %d ] = %d\n", i, j, Mathric[i][j]);
			printf("\n");
		}
		printf("\n\n");
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
				printf("Inverse_Mathric [ %d ] [ %d ] = %d\n", i, j, Inverse_Mathric[i][j]);
			printf("\n");
		}
		printf("\n\n");

		/* Для статической матрицы создаем третью матрицу
		New_Mathric[3][3];
		*/
		// Для динамической матрицы создаем третью матрицу
		double** New_Mathric = (double**)calloc(row, sizeof(double*));
		for (int i = 0; i < col; i++)
		{
			New_Mathric[i] = (double*)calloc(col, sizeof(double));
		}

		// При произведении двух матриц: матрица и обратная матрица, 
		// образуются матрица, в которой главная диагональ равен единице

		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				New_Mathric[i][j] = 0;
				for (int k = 0; k < col; k++)
					New_Mathric[i][j] += Mathric[i][k] * Inverse_Mathric[k][j];
			}
		}


		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
				printf("New_Mathric [ %d ] [ %d ] = %0.2f\n", i, j, New_Mathric[i][j]);
			printf("\n");
		}

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 15:
	{
		/*Доказать в программе способ расположения элементов в двумерном массиве
		(с помощью печати  массива через указатель).*/
		system("CLS");
		printf("Доказательство расположения массива\n\n");

		int col, row;
		// Координаты (значения)
		int location_i, location_j;
		// Координаты (указатели)
		int* p_location_i = &location_i, * p_location_j = &location_j;
		// Указатель матрицы
		//int** pMathric;

		printf("Введите размер столбцы матрицы: ");
		scanf_s("%d", &col);
		printf("Введите размер строк матрицы: ");
		scanf_s("%d", &row);

		// Создание динамической матрицы
		int** Mathric = (int**)calloc(row, sizeof(int*));
		for (int i = 0; i < col; i++)
			Mathric[i] = (int*)calloc(col, sizeof(int));

		// Заполняет матрицу случайными числами
		for (int i = 0; i < col; i++)
			for (int j = 0; j < row; j++)
			{   //  Заполнение массива числами случайными // от 0 до 1000
				Mathric[i][j] = rand() % 1000;
				// Печать элемента массива
				printf("Mathric[ %d ][ %d ] = %d\n", i, j, Mathric[i][j]);
			}

	RETURN:;
		printf("Введите номер строки и столбцы матрицы для вычисления значений\n");
		printf("Столбцы = ");
		scanf_s("%d", &location_i);
		printf("Строка = ");
		scanf_s("%d", &location_j);

		if ((location_i > col) || (location_j > row))
		{
			printf("Ошибка! Превышение допустимого размера!\n");
			goto RETURN;
			location_i = getchar();
			location_j = getchar();
			break;
		}
		else
		{
			printf("location_i = %p = %d\n", p_location_i, *p_location_i);
			printf("location_j = %p = %d\n\n", p_location_j, *p_location_j);

			printf("Mathric [ %d ] [ %d ] = %d\n", *p_location_i, *p_location_j, Mathric[*p_location_i][*p_location_j]);

		}

		free(Mathric);

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case 0:
	{
		printf("Выход с программы\n\n");

		// После этого пункта выход из программы
		exit(0);
	}

	default:
	{
		printf("Данный символ не опознан. Возврат в меню\n");

		// Сброс буферизации при нажатии ENTER
		sw = getchar();

		system("pause");
		goto MENU;
		break;
	}
	}

	system("PAUSE");
}


float factf(float nf)
{
	float rez;
	if (nf == 0.0f)
		return rez = 1;
	else
		return rez = nf * factf(nf - 1.0f);
};
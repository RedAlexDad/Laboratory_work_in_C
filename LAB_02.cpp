// LAB_2.cpp

// Лабораторная работа №2

/*
Значения b вычислить в программе до цикла, а значение a ввести перед циклом.

z=cos(0.1bx)/x,       x=0.1, 0.2,…..1. ОПЕРАТОР ЦИКЛА while.

Программа и блок-схема должны быть "изоморфизмом"

=====================================================================================================

8. 8. Дополнительные требования для сильных студентов СУЦ (д.т.).

	8.1. 7.1 Определение максимального значения

	Написать программу для определения максимального значения из трех целых переменных: A, B, C.
	Значения переменных вводятся с клавиатуры.
	При выводе учесть факт возможного равенства значений переменных,
	делая при этом дополнительные проверки.
	( всего должно 8 различных вариантов для выхода при сравнении - 23)
	В выводе может быть даже такой вариант:
			   printf("Максимально (A = B = C) - %d\n" , B);

	8.2. 7.2 Вычисления с запоминанием значений
	Написать программу для вычисления значений функции по формуле контрольного задания и
	запомнить результаты вычисления в действительном (типа double) массиве MasZ (double),
	а соответствующие вычисленные в программе аргументы в массиве MasX (double).
	Размер массива определен заранее (но не более 10 элементов).
	Распечатать оба массива после завершения вычислений столбиком.
	Значения b для формулы перед циклом ввести с клавиатуры.
	Использовать оператор цикла по варианту (for или while).
	Быть готовым переделать свою программу для оператора цикла do.

	8.3. 7.3 Вычисления с запоминанием значений и вводом аргументов

	Написать программу для вычисления значений функции по формуле контрольного задания и
	запомнить результаты вычисления в массиве действительном MasZ (типа double).
	Максимальный размер массива определен заранее (<=10). Значения b вычислить в программе.
	Исходные данные (аргументы х) предварительно и последовательно ввести с клавиатуры в отдельный
	массив MasX (типа float ). Распечатать весь вычисленный массив MasZ и соответствующие
	аргументы из массива MasX  после завершения вычислений в виде таблицы. Использовать оператор цикла while.
	Контролировать превышение размера массива при вводе.


	8.4. 7.4 Вычисления минимума в массиве

	Написать программу для вычисления минимума MinM в целочисленном (int) массиве MasM.
	Размерность массива задана (10). Значения элементов массива заданы при его описании (инициализация массива).
	Значение минимума MinM и его номер в массиве вывести на экран. Использовать оператор цикла for.

*/

// Подключение директивы препроцессора для математических решений
#define _USE_MATH_DEFINES

// Подключение библиотеки математических функций
#include <stdio.h>
#include <math.h>
#include <process.h>
#include <stdlib.h> 
#include <iostream>

// Основная программа
void lab_02() {
	// Подключение русификации программы
	system("chcp 1251 > nul");

	// Устанавливаем типы переменных
	char sw; // -> дл переключателей



	// Устанавливаем точку возврата меню с потерей результата
MENU:;

	// Очистика предыдующих результатов
	system("CLS");

	// Вывод меню
	printf("\n\n z = cos(0.1 * b * x) / x,       x = 0.1, 0.2, ... 1\n\n");

	printf("Контрольные задания: \n\n");
	printf("  1. Определение минимального значения, п.5.3\n");
	printf("  2. Использование переключателя для решения уравнения, п.5.4\n");
	printf("  3. Цикл вычисления значений математических функции по варианту (оператор if), п.5.5\n");
	printf("  4. Цикл вычисления значений функции по варианту операторы (for, do, while), п.5.6\n\n");

	printf("Программа с дополнительными требованиями:\n\n");
	printf("  5. Определение максимального значения п.8.1\n");
	printf("  6. Вычисления с запоминанием значений п.8.2\n");
	printf("  7. Вычисления с запоминанием значений и вводом аргументов п.8.3\n");
	printf("  8. Вычисления минимума в массиве п.8.4\n\n");
	printf("  9. Число Фибоначи\n\n");
	printf("e. Выход ...\n");

	printf("Выберете пункт меню: ");

	sw = getchar();
	//scanf_s("%c", &sw);

	printf("\n");

	//Начало

	// Переключатель
	switch (sw)
	{

	case '1':
	{
		/*Написать программу для определения минимального значения из трех целых переменных (тип int): A, B, C.
		Переменные задаются в программе с помощью оператора присваивания (без ввода).
		Результаты сравнения и исходные значения переменных вывести на экран (функцией printf).
		Построить блок-схему программы.*/
		system("cls");
		printf("  1. Определение минимального значения, п.5.3\n");

		int A, B, C;
		//int A = 1, B = 2, C = 3;

		printf("Введите любые значение для переменных A, B, C\n");
		printf("Введите переменную для A = ");
		scanf_s("%d", &A);
		printf("Введите переменную для B = ");
		scanf_s("%d", &B);
		printf("Введите переменную для C = ");
		scanf_s("%d", &C);
		printf("\n");

		if (A <= B)
		{
			if (B <= C)
			{
				if (A == B)
				{
					if ((A == B) && (A == C))
						printf("A = B = C = %d\n", A);
					else
						printf("Min A = B = %d\n", A);
				}
				else
					printf("Min A = %d\n", A);
			}
			else
			{
				if (A <= C)
				{
					if (A == C)
						printf("Min A = C = %d\n", A);
					else
						printf("Min A = %d\n", A);
				}
				else
					printf("Min C = %d\n", C);
			}
		}
		else
		{
			if (B <= C)
			{
				if (A < C)
				{
					printf("Min B = %d\n", B);
				}
				else
				{
					if (B < C)
						printf("Min B = %d\n", B);
					else
						printf("Min B = C = %d\n", B);
				}
			}
			else
			{
				if (A == C)
				{
					printf("Min A = C = %d\n", A);
				}
				else
				{
					printf("Min C = %d\n", C);
				}
			}
		}

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case '2':
	{
		/*Переделать программу для вычисления корней квадратного уравнения (см. выше)
		с ис-пользованием переключателя (switch) для d (детерминанта квадратного уравнения).
		Примеча-ние: для этого нужно добавить переменную целого типа и
		вычислить ее по условию значения детерминанта d (1  или 2). Построить блок-схему программы.
		Коэффициенты уравнения (a,b,c) задать в программе с помощью присваивания значений.*/
		system("cls");
		printf("  2. Использование переключателя для решения уравнения, п.5.4\n");

		double Dis;
		float a, b, c, x, x1, x2;
		int a_if = 1, Dis_if;

		printf("Программа для вычисления корней квадратного уравнения\n");
		printf("a*x^2 + b*x + c = 0\n\n");

		printf("Введите а = ");
		scanf_s("%f", &a);
		printf("Введите b = ");
		scanf_s("%f", &b);
		printf("Введите c = ");
		scanf_s("%f", &c);

		//Dis = (long double)(pow(b, 2) - 4 * a * c);
		Dis = (pow(b, 2) - 4 * a * c);
		//Dis = (pow(b, 2) - 4 * a * c);

		// Проверка знаменатели
		if (a > 0 ? a_if = 1 : a_if = 0);
		// Установки условия дискримината для переключения
		// "условие" ? "выражение 1" : "выражение 2";
		if (Dis >= 0 ? (Dis == 0 ? Dis_if = 0 : Dis_if = 1) : Dis_if = -1)
			/*    if (D >= 0)
					if (D == 0)
						D_if = 0;
					else
						D_if = 1;
				  else
					D_if = -1;
			*/
			printf("D = %0.2f   = >  ", Dis);

		// Переключатель для переменных a
		switch (a_if)
		{
		case 0:
		{
			printf("Ошибка! Знаменатель а = 0. Возврат в меню\n");
			break;
		}

		case 1:
		{
			switch (Dis_if)
			{
				// Мнимые числа
			case -1:
			{
				printf("D < 0\n\n");
				x1 = (-b - sqrt(abs(Dis))) / 2 * a;
				x2 = (-b + sqrt(abs(Dis))) / 2 * a;

				printf("x1 = (%0.2f - i * sqrt(|%0.2f|)) / 2 * %0.2f) = %0.2f * i \n", b, abs(Dis), a, x1);
				printf("x2 = (%0.2f + i * sqrt(|%0.2f|)) / 2 * %0.2f) = %0.2f * i \n", b, abs(Dis), a, x2);
				break;
			}
			// Один корень
			case 0:
			{
				printf("D = 0\n\n");
				x = -b / 2 * a;
				printf("x = %0.2f\n", x);
				break;
			}
			// Два корня
			case 1:
			{
				printf("D > 0\n\n");
				x1 = (-b - sqrt(Dis)) / (2 * a);
				x2 = (-b + sqrt(Dis)) / (2 * a);

				printf("x1 = %0.2f\n", x1);
				printf("x2 = %0.2f\n", x2);
				break;
			}
			}
		}
		}
		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;

	}

	case '3':
	{
		/*Составить циклическую программу на основе оператора if для
		вычисления и вывода значений функции по заданному варианту (см. ниже).
		Формула для вычисления заданной функции z и заданного диапазона значений аргументов x
		задается вариантом (см. раздел 6 ниже). Параметр а или b предварительно вводятся с клавиатуры.
		На печать выводятся только те значения z, величина которых превышает значение a.
		Цикл должен быть построен с помощью условного оператора if.
		Проверять возможность проведения вычислений (В частности деления на нуль при значении х=0).
		Построить и разместить в отчете блок-схему программы с оператором if.*/

		//	4.	z = cos (0.1 * b * x) / x,       x = 0.1, 0.2,…..1. ОПЕРАТОР ЦИКЛА while.

		system("cls");
		printf("  3. Цикл вычисления значений математических функции по варианту (оператор if), п.5.5\n");
		// Начальные условия цикла
		float x = 0.1, a, b, step = 0.1;

		// Ввод границы для печати функции
		printf("Введите значение границы печати функции (не более 1.0) a: ");
		scanf_s("%f", &a);
		printf("Введите любое значение b для функции: ");
		scanf_s("%f", &b);
		printf("\n");

	RETURN:;
		// Устанавливаем ограничение по размеру
		if (x <= 1.0)
		{
			// Проверка условия
			if (x != 0)
			{
				float z = (cos(0.1 * b * x) / x);
				// Проверяем, значение Z превышает ли значению A?
				if (z > a)
					// Печать на экран
					printf("z = %0.3f для b = %0.2f и x = %0.1f\n", z, b, x);
			}
			else
			{
				printf("Ошибка! Деление невозможно!\n");
			};
			// Пошагово прибавляет 0.1
			x += step;
			// Возврат к первоначальному условию для продолжения цикла
			goto RETURN;
		}


		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case '4':
	{
		/*Выполнить предыдущее задание вычисления значений функции с использованием операторов циклов for,
		do или while(см. свои варианты). Значения  переменных a и b вычислить в программе.
		Результат распечатать в том же цикле.
		Построить и разместить в отчете блок-схему программы с оператором цикла.*/

		double step = 0.1; // -> Шаг с 0.1 единицей
		double Z, x = 0.1; // Начальное значение x = 0.1; не 0.0

		system("CLS");
		printf("  4. Цикл вычисления значений функции по варианту операторы (for, do, while), п.5.6\n\n");

		int b = 1;

		while (x <= 1)
		{
			Z = (float)(cos(0.1 * b * x) / x);
			printf("z = %f   для   b = %d   x = %0.1f\n", Z, b, x);
			x += step;
		}

		printf("\n");
		// Сбрасывает счетчик;
		x = 0.1;

		printf("\n");
		system("pause");
		sw = getchar();
		goto MENU;
		break;
	}

	case '5':
	{
		/*
		8.1. 7.1 Определение максимального значения
		Написать программу для определения максимального значения из трех целых переменных: A, B, C.
		Значения переменных вводятся с клавиатуры.
		При выводе учесть факт возможного равенства значений переменных,
		делая при этом дополнительные проверки.
		( всего должно 8 различных вариантов для выхода при сравнении - 23)
		В выводе может быть даже такой вариант:
		printf("Максимально (A = B = C) - %d\n" , B);
		*/
		system("cls");
		printf("  5. Определение максимального значения п.8.1\n");

		int A, B, C;
		printf("Введите переменную для A = ");
		scanf_s("%d", &A);
		printf("Введите переменную для B = ");
		scanf_s("%d", &B);
		printf("Введите переменную для C = ");
		scanf_s("%d", &C);
		printf("\n");

		if (A >= B)
		{
			if (B >= C)
			{
				if (A == B)
				{
					if ((A == B) && (A == C))
						printf("A = B = C = %d\n", A);
					else
						printf("Max A = B = %d\n", A);
				}
				else
					printf("Max A = %d\n", A);
			}
			else
			{
				if (A >= C)
				{
					if (A == C)
						printf("Max A = C = %d\n", A);
					else
						printf("Max A = %d\n", A);
				}
				else
					printf("Max C = %d\n", C);
			}
		}
		else
		{
			if (B >= C)
			{
				if (A > C)
				{
					printf("Max B = %d\n", B);
				}
				else
				{
					if (B > C)
						printf("Max B = %d\n", B);
					else
						printf("Max B = C = %d\n", B);
				}
			}
			else
			{
				if (A == C)
				{
					printf("Max A = C = %d\n", A);
				}
				else
				{
					printf("Max C = %d\n", C);
				}
			}
		}


		printf("\n");
		// Сброс буферизации при нажатии ENTER
		sw = getchar();
		system("pause");
		goto MENU;
		break;
	}

	case '6':
	{
		/*
		8.2. 7.2 Вычисления с запоминанием значений
		Написать программу для вычисления значений функции по формуле контрольного задания и
		запомнить результаты вычисления в действительном (типа double) массиве MasZ (double),
		а соответствующие вычисленные в программе аргументы в массиве MasX (double).
		Размер массива определен заранее (но не более 10 элементов).
		Распечатать оба массива после завершения вычислений столбиком.
		Значения b для формулы перед циклом ввести с клавиатуры.
		Использовать оператор цикла по варианту (for или while).
		Быть готовым переделать свою программу для оператора цикла do.
		*/
		system("CLS");
		printf("Вычисления с запоминанием значений п.8.2\n\n");

		// Массив с размером 10
		double b = 1.00, x = 0.1;
		double MasZ[10], MasX[10];
		int i;
		double step = 0.1; // -> Шаг с 0.1 единицей


		// Вычисления первого массива для закрепления результата
		for (i = 0; i < 10; i++)
		{
			MasZ[i] = (double)(cos(0.1 * b * x) / x);
			printf("MasZ [ %d ] = %lf   для   b = %lf   x = %0.1f\n", i, MasZ[i], b, x);
			x += step;
		}
		// Сбрасывает счетчик;
		x = 0.1;
		printf("\n");

		// lf -> long float (длинные плавающие числа)
		// Для типов double нужно написать lf для правильного присваиванияы чисел, иначе будет ошибка с выделенией памяти
		printf("Введите любое число для переменной b = ");
		scanf_s("%lf", &b);

		// Вычисления второго массива
		for (i = 0; i < 10; i++)
		{
			MasX[i] = (cos(0.1 * b * x) / x);
			printf("MasX [ %d ] = %lf   для   b = %lf   x = %0.1f\n", i, MasX[i], b, x);
			x += step;
		}
		// Сбрасывает счетчик;
		x = 0.1;

		// Сброс буферизации при нажатии ENTER
		sw = getchar();
		system("pause");
		goto MENU;
		break;
	}

	case '7':
	{
		/*
		8.3. 7.3 Вычисления с запоминанием значений и вводом аргументов
		Написать программу для вычисления значений функции по формуле контрольного задания и
		запомнить результаты вычисления в массиве действительном MasZ (типа double).
		Максимальный размер массива определен заранее (<=10). Значения b вычислить в программе.
		Исходные данные (аргументы х) предварительно и последовательно ввести с клавиатуры в отдельный
		массив MasX (типа float ). Распечатать весь вычисленный массив MasZ и соответствующие
		аргументы из массива MasX  после завершения вычислений в виде таблицы. Использовать оператор цикла while.
		Контролировать превышение размера массива при вводе.
		*/
		system("CLS");
		printf("Вычисления с запоминанием значений и вводом аргументов п.8.3\n");

		// Массив с размером 10
		double b = 1.00, press_x, x = 0.1;
		int i = 0;
		double step = 0.1; // -> Шаг с 0.1 единицей

		// Создание статического массива
		double MasZ[10];
		float MasX[10];

		// lf -> long float (длинные плавающие числа)
		// Для типов double нужно написать lf для правильного присваиванияы чисел, иначе будет ошибка с выделенией памяти
		printf("Введите любое число для переменной b = ");
		scanf_s("%lf", &b);

		// Вычисления первого массива для закрепления результата
		while (x <= 1)
		{
			MasZ[i] = (cos(0.1 * b * x) / x);
			printf("MasZ [ %d ] = %lf   для   b = %lf   x = %0.3f\n", i, MasZ[i], b, x);
			x += step;
			i++;
		}
		// Сбрасывает счетчик;
		x = 0.1;
		i = 0;

		printf("\n cos(0.1 * b * x) / x \n Введите x \n");

		// Вычисления второго массива
		while (x <= 1)
		{
			printf("x = ");
			scanf_s("%lf", &press_x);
			MasX[i] = (cos(0.1 * b * press_x) / press_x);
			printf("MasX [ %d ] = %lf   для   b = %lf   x = %0.3f\n", i, MasX[i], b, press_x);
			x += step;
			i++;
		}
		// Сбрасывает счетчик;
		x = 0.1;
		i = 0;

		/*
		printf("Введите размер массива от 1 до 10 \n Размер = ");
		scanf_s("%d", &size);

		if ((size > 10) || (size < 1))
			printf("Ошибка! Введите правильный размер массив!\n");
		else
		{
			// Создание динамического массива
			double* MasZ = new double[size];
			float* MasX = new float[size];

			// lf -> long float (длинные плавающие числа)
			// Для типов double нужно написать lf для правильного присваиванияы чисел, иначе будет ошибка с выделенией памяти
			printf("Введите любое число для переменной b = ");
			scanf_s("%lf", &b);

			// Вычисления первого массива для закрепления результата
			while (x <= size * 0.1)
			{
				MasZ[i] = (cos(0.1 * b * x) / x);
				printf("MasZ [ %d ] = %lf   для   b = %lf   x = %0.3f\n", i, MasZ[i], b, x);
				x += step;
				i++;
			}
			// Сбрасывает счетчик;
			x = 0.1;
			i = 0;

			printf("\n cos(0.1 * b * x) / x \n Введите x \n");

			// Вычисления второго массива
			while (x <= (size * 0.1))
			{
				printf("x = ");
				scanf_s("%lf", &press_x);
				MasX[i] = (cos(0.1 * b * press_x) / press_x);
				printf("MasX [ %d ] = %lf   для   b = %lf   x = %0.3f\n", i, MasX[i], b, press_x);
				x += step;
				i++;
			}
			// Сбрасывает счетчик;
			x = 0.1;
			i = 0;
			delete MasX;
			delete MasZ;

		}
		*/

		// Сброс буферизации при нажатии ENTER
		sw = getchar();
		system("pause");
		goto MENU;
		break;
	}

	case '8':
	{
		/*
		8.4. 7.4 Вычисления минимума в массиве
		Написать программу для вычисления минимума MinM в целочисленном (int) массиве MasM.
		Размерность массива задана (10). Значения элементов массива заданы при его описании (инициализация массива).
		Значение минимума MinM и его номер в массиве вывести на экран. Использовать оператор цикла for.
		*/
		system("CLS");
		printf("Вычисления минимума в массиве п.8.4\n\n");
		int MasM[10] = { 1, 2, 3, 4, 0, 6, 7, 8, 9, 5 };
		int i, b = 1, MaxM = MasM[0], MinM = 0;
		double x = 0.1;
		int size = sizeof(MasM) / sizeof(int);
		//printf("size = %d", size);

		printf("MasM[10] = {1, 2, 3, 4, 0, 6, 7, 8, 9, 5}");

		printf("\n");
		for (i = 1; i < size; i++)
		{
			if (MasM[i] < MaxM)
			{
				MinM = i;
				MaxM = MasM[i];
			}

		}

		printf("Минимальное значение: \n\n MasM [ %d ] = %d \n\n", MinM, MasM[MinM]);

		// Сброс буферизации при нажатии ENTER
		sw = getchar();
		system("pause");
		goto MENU;
		break;
	}

	case '9':
	{
		/*Чи́сла Фибона́ччи (также Фибона́чи) — элементы числовой последовательности.
		0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711


		Формула: F0 = 0; F1 = 1; Fn = Fn+1 - Fn+2, если n >= 2, n E Z;

		*/
		system("CLS");
		printf("Число фибоначи\n");

		int press, summa = 0, f0 = 0, f1 = 1;

		printf("Введите любое число: ");
		scanf_s("%d", &press);

		for (int i = 0; i < 5; i++)
		{
			printf("%d\n", summa);
			summa = (summa + 1) - (summa + 2);
		}

		// Сброс буферизации при нажатии ENTER
		sw = getchar();

		system("pause");
		goto MENU;
		break;
	}

	case 'e':
	{
		printf("Выход с программы\n");

		// После этого пункта выход из программы
		exit(0);
	}

	default:
	{
		printf("Данный символ не опознан. Возврат в меню\n");

		// Сброс буферизации при нажатии ENTER
		sw = getchar();

		system("pause");
		goto MENU;
		break;
	}
	}

	system("PAUSE");
}
